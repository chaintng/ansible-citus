---

# - name: upgrade all packages
#   yum:
#     name: '*'
#     state: latest

## Install services (PostgreSQL, ctius and repmgr)
- name: yum |  Setup PostgreSQL repository for {{ ansible_distribution }}
  yum:
    name: "{{ item }}"
    state: installed
  with_items:
    - https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm
    - http://packages.2ndquadrant.com/repmgr/yum-repo-rpms/repmgr-rhel-1.0-1.noarch.rpm
  when: ansible_distribution == "CentOS"
  tags: [db, postgresql]

- name: add repmgr rpm GPG key
  rpm_key:
      state: present
      key: http://packages.2ndquadrant.com/repmgr/RPM-GPG-KEY-repmgr

- name: yum | Install PostgreSQL
  yum:
    name: "{{ item }}"
    state: installed
  with_items:
    - postgresql10-server
    - postgresql10-contrib
    - postgresql10-devel
  register: install_postgresql
  tags: [db, postgresql]

- name: yum | Install repmgr
  yum:
    name: repmgr10
    state: installed
  tags: [db, postgresql]
  when: with_replica == true

- name: yum | Initialize PostgreSQL
  command: /usr/pgsql-10/bin/postgresql-10-setup initdb
  when: 
    - install_postgresql.changed
    - "('postgres_master' in group_names) or ('citus_worker' in group_names)"
  tags: [db, postgresql]

## Setup replication configuration
- name: copy postgresql.replication.conf
  copy:
    src: files/postgresql.replication.conf
    dest: /var/lib/pgsql/10/data/postgresql.replication.conf
    owner: postgres
    group: postgres
  when: 
    - ('postgres_master' in group_names) or ('citus_worker' in group_names)
    - with_replica == true

- name: include postgresql.replication.conf
  lineinfile:
    path: /var/lib/pgsql/10/data/postgresql.conf
    line: "include 'postgresql.replication.conf'"
  notify:
  - Restart PostgreSQL
  when: 
    - ('postgres_master' in group_names) or ('citus_worker' in group_names)
    - with_replica == true

- name: replace configuration that needed
  replace:
    path: /var/lib/pgsql/10/data/postgresql.conf
    regexp: "{{ item }}"
    replace: '\1'
  with_items:
    - "^#(shared_preload_libraries.*)$"
    - "^#(max_connections.*)$"
    - "^#(max_prepared_transactions.*)$"
  notify:
    - Restart PostgreSQL
  when: ('postgres_master' in group_names) or ('citus_worker' in group_names)

- name: setting max_connections
  replace:
    path: /var/lib/pgsql/10/data/postgresql.conf
    regexp: "^max_connections = (.*)"
    replace: "max_connections = {{ max_connections }}"
  notify:
    - Restart PostgreSQL
  when: ('postgres_master' in group_names) or ('citus_worker' in group_names)

- name: setting max_prepared_transactions for repmgr active node
  replace:
    path: /var/lib/pgsql/10/data/postgresql.conf
    regexp: "^max_prepared_transactions = (.*)"
    replace: "max_prepared_transactions = {{ max_connections * 2 }}"
  notify:
    - Restart PostgreSQL
  when: ('postgres_master' in group_names)

- name: setting log format prefix
  replace:
    path: /var/lib/pgsql/10/data/postgresql.conf
    regexp: "^log_line_prefix = (.*)"
    replace: "log_line_prefix = '< %m %u@%d[%p] > '"
  notify:
    - Restart PostgreSQL
  when: ('postgres_master' in group_names) or ('citus_worker' in group_names)

- name: setting shared_preload_libraries
  replace:
    path: /var/lib/pgsql/10/data/postgresql.conf
    regexp: "^shared_preload_libraries = (.*)"
    replace: "shared_preload_libraries = 'pg_stat_statements'"
  notify:
    - Restart PostgreSQL
  when: ('postgres_master' in group_names) or ('citus_worker' in group_names)

- name: add pg_stat_statements config for pghero
  lineinfile:
    path: /var/lib/pgsql/10/data/postgresql.conf
    line: "{{ item }}"
  with_items:
    - "pg_stat_statements.track = all"
  notify:
    - Restart PostgreSQL
  when: ('postgres_master' in group_names) or ('citus_worker' in group_names)

## Tuning postgres configuration
- name: copy postgresql.tuning.conf
  copy:
    src: files/postgresql.tuning.conf
    dest: /var/lib/pgsql/10/data/postgresql.tuning.conf
    owner: postgres
    group: postgres
  when:
    - tuning_postgres == true
    - ('postgres_master' in group_names) or ('citus_worker' in group_names)

- name: include postgresql.tuning.conf
  lineinfile:
    path: /var/lib/pgsql/10/data/postgresql.conf
    line: "include 'postgresql.tuning.conf'"
  notify:
  - Restart PostgreSQL
  when: 
    - tuning_postgres == true
    - ('postgres_master' in group_names) or ('citus_worker' in group_names)

- name: config semaphore value
  lineinfile:
    path: /etc/sysctl.d/90-sample.conf
    line: "kernel.sem = 250 32000 32 200"
  when: 
    - tuning_postgres == true
    - ('postgres_master' in group_names) or ('citus_worker' in group_names)

- name: apply semaphore value
  shell: "/sbin/sysctl -p /etc/sysctl.d/90-sample.conf"
  when: 
    - tuning_postgres == true
    - ('postgres_master' in group_names) or ('citus_worker' in group_names)

- name: add repmgr in pg_hba.conf for postgres master
  lineinfile:
    path: /var/lib/pgsql/10/data/pg_hba.conf
    line: "{{ item }}"
  with_items:
    - local   replication   repmgr                              trust
    - host    replication   repmgr      127.0.0.1/32            trust
    - host    replication   repmgr      10.0.0.0/8          trust
    - local   repmgr        repmgr                              trust
    - host    repmgr        repmgr      127.0.0.1/32            trust
    - host    repmgr        repmgr      10.0.0.0/8          trust
    - host    all             all             10.0.0.1/8            md5
    - host    all             all             127.0.0.1/32            md5
  notify:
    - Restart PostgreSQL
  when: 
    - ('postgres_master' in group_names)
    - with_replica == true

- name: yum | MD5-encrypted password for PostgreSQL 1
  replace:
    dest: /var/lib/pgsql/10/data/pg_hba.conf
    regexp: ^(host.*all.*all.*127.0.0.1\/32.*)ident$
    replace: host\tall\tpostgres\t127.0.0.1/32\ttrust
  tags: [db, postgresql]
  when: 
    - ('postgres_master' in group_names) or ('citus_worker' in group_names)

- name: yum | MD5-encrypted password for PostgreSQL 2
  replace:
    dest: /var/lib/pgsql/10/data/pg_hba.conf
    regexp: ^(local.*all.*all.*)peer$
    replace: \1trust
  tags: [db, postgresql]
  when: 
    - ('postgres_master' in group_names) or ('citus_worker' in group_names)

- name: yum | trust for local
  replace:
    dest: /var/lib/pgsql/10/data/pg_hba.conf
    regexp: ^(host.*all.*all.*::1\/128.*)ident$
    replace: \1md5
  tags: [db, postgresql]
  when: 
    - ('postgres_master' in group_names) or ('citus_worker' in group_names)

- name: yum | Ensure PostgreSQL is listening on all localhost
  replace:
    dest: /var/lib/pgsql/10/data/postgresql.conf
    regexp: '^#?listen_addresses\s*=\s*''localhost'''
    replace: 'listen_addresses = ''*'''
  notify:
  - Restart PostgreSQL
  tags: [db, postgresql]
  when: 
    - ('postgres_master' in group_names) or ('citus_worker' in group_names)

## repmgr cluster setup

- name: Move repmgr.conf to template
  command: mv /etc/repmgr/10/repmgr.conf /etc/repmgr/10/repmgr.conf.template
  ignore_errors: yes
  when:
    - with_replica == true

- name: Copy repmgr.conf to master main config
  template:
    src: files/repmgr-main.conf.j2
    dest: /etc/repmgr.conf
    owner: postgres
    group: postgres
  notify:
  - Restart PostgreSQL
  when: 
    - ('postgres_master' in group_names) or ('citus_worker' in group_names)
    - with_replica == true

- name: Copy repmgr.conf to master repl config
  template:
    src: files/repmgr-repl.conf.j2
    dest: /etc/repmgr.conf
    owner: postgres
    group: postgres
  notify:
  - Restart PostgreSQL
  when: 
    - "'postgres_repl' in group_names"
    - with_replica == true

- name: yum | Start and Enable PostgreSQL
  service:
    name: postgresql-10
    state: started
    enabled: yes
  tags: [db, postgresql]
  when: 
    - ('postgres_master' in group_names) or ('citus_worker' in group_names)

# CREATE PGHERO USER
- name: Check if pghero user existed
  shell: psql -U postgres -h 127.0.0.1 -c "SELECT COUNT(*) FROM pg_roles WHERE rolname='{{ pghero_user }}'" | sed -n '3p' | sed -e 's/^[ \t]*//'
  register: has_pghero_user
  when: 
    - ('postgres_master' in group_names) or ('citus_worker' in group_names)

- name: Create pghero users
  shell: psql -U postgres -h 127.0.0.1 -c "CREATE ROLE \"{{ pghero_user }}\" WITH CREATEDB SUPERUSER LOGIN PASSWORD '{{ pghero_password }}'"
  when:
    - ('postgres_master' in group_names) or ('citus_worker' in group_names)
    - has_pghero_user.stdout == "0"

## Setup replication manager user
- name: Check if repmgr user existed
  shell: psql -U postgres -h 127.0.0.1 -c "SELECT COUNT(*) FROM pg_roles WHERE rolname='repmgr'" | sed -n '3p' | sed -e 's/^[ \t]*//' # TODO
  register: has_repmgr_user
  when: 
    - ('postgres_master' in group_names) or ('citus_worker' in group_names)
    - with_replica == true

- name: create repmgr user
  become: yes
  become_method: sudo
  become_user: postgres
  shell: createuser -s repmgr
  when: 
    - ('postgres_master' in group_names) or ('citus_worker' in group_names)
    - with_replica == true
    - has_repmgr_user.stdout == "0"

- name: Check if repmgr database existed
  shell: psql -U postgres -h 127.0.0.1 -c "SELECT COUNT(*) FROM pg_database WHERE datname='repmgr'" | sed -n '3p' | sed -e 's/^[ \t]*//'
  register: has_repmgr_database
  when:
    - with_replica == true

- name: create repmgr db
  become: yes
  become_method: sudo
  become_user: postgres
  shell: createdb repmgr -O repmgr
  when:
    - with_replica == true
    - ('postgres_master' in group_names) or ('citus_worker' in group_names)
    - has_repmgr_database.stdout == "0"
  
- name: alter user repmgr
  become: yes
  become_method: sudo
  become_user: postgres
  shell: psql -c 'ALTER USER repmgr SET search_path TO repmgr, "$user", public;'
  when:
    - with_replica == true
    - ('postgres_master' in group_names) or ('citus_worker' in group_names)

- name: Register master main in repmgr
  become: yes
  become_method: sudo
  become_user: postgres
  shell: /usr/pgsql-10/bin/repmgr -F primary register
  when: 
    - with_replica == true
    - ('postgres_master' in group_names)

- name: check if postgres data is existed
  stat: path=/var/lib/pgsql/10/data/postgresql.conf
  register: data_existed
  when: 
    - with_replica == true
    - "'postgres_repl' in group_names"

- name: Clone postgres master to replica
  become: yes
  become_method: sudo
  become_user: postgres
  command: /usr/pgsql-10/bin/repmgr -h {{ postgres_master }} -U repmgr -d repmgr standby clone
  when: 
    - with_replica == true
    - "'postgres_repl' in group_names"
    - data_existed.stat.exists == False

- name: yum | Start and Enable PostgreSQL
  become: yes
  service:
    name: postgresql-10
    state: started
    enabled: yes
  tags: [db, postgresql]
  when: 
    - with_replica == true
    - "'postgres_repl' in group_names"
    - data_existed.stat.exists == False

- name: Register master repl in repmgr
  become: yes
  become_method: sudo
  become_user: postgres
  command: /usr/pgsql-10/bin/repmgr -F standby register
  when: 
    - with_replica == true
    - "'postgres_repl' in group_names"
    - data_existed.stat.exists == False

- name: add postgres bin path
  lineinfile:
    path: /etc/profile
    line: "PATH=$PATH:/usr/pgsql-10/bin/"

## ALLOW SSH ACCESS FOR MASTER AND REPLICA

- name: add .ssh folder
  become: yes
  become_method: sudo
  become_user: postgres
  file:
    path: /var/lib/pgsql/.ssh
    state: directory
    mode: 0700
  when: ('postgres_master' in group_names) or ('postgres_repl' in group_names)

- name: add authorized_keys folder
  become: yes
  become_method: sudo
  become_user: postgres
  file:
    path: /var/lib/pgsql/.ssh/authorized_keys
    state: touch
    mode: 0600
  when: ('postgres_master' in group_names) or ('postgres_repl' in group_names)

- name: set public key
  become: yes
  become_method: sudo
  become_user: postgres
  copy: 
    content: "{{ ssh_public_key }}"
    dest: /var/lib/pgsql/.ssh/id_rsa.pub
    mode: 0644
  when: ('postgres_master' in group_names) or ('postgres_repl' in group_names)

- name: set private key
  become: yes
  become_method: sudo
  become_user: postgres
  copy: 
    content: "{{ ssh_private_key }}"
    dest: /var/lib/pgsql/.ssh/id_rsa
    mode: 0600
  when: ('postgres_master' in group_names) or ('postgres_repl' in group_names)

- name: add authorized key
  lineinfile:
    path: /var/lib/pgsql/.ssh/authorized_keys
    line: "{{ ssh_public_key }}"
  when: ('postgres_master' in group_names) or ('postgres_repl' in group_names)

- name: CentOS 7 bug on auth # https://www.centos.org/forums/viewtopic.php?t=8031
  become: yes
  become_method: sudo
  become_user: postgres
  shell: restorecon -R ~/.ssh
  when: ('postgres_master' in group_names) or ('postgres_repl' in group_names)
